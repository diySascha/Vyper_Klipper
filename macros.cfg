####################################################################################################
# Start Code Superslicer:                                                                          #
# START_PRINT BED={first_layer_bed_temperature} EXTRUDER={first_layer_temperature}                 #
# Start Code Cura (activate relative extrusion in cura / aktiviere Relative Extrusion in Cura):    #
# START_PRINT BED={material_bed_temperature_layer_0} EXTRUDER={material_initial_print_temperature} #
####################################################################################################


#######################################
# START PRINT Vyper                   #
#######################################
[gcode_macro START_PRINT]
description: All what needs to be done at print start
gcode:
    {action_respond_info("Start the Magic... :-)")}
    #### set defaults ####
    {% set extruder = params.EXTRUDER|default(0) %}
    {% set bed = params.BED|default(0) %}
    BED_MESH_PROFILE LOAD={ params.BED_MESH|default(default) }
    SET_PRESSURE_ADVANCE ADVANCE={ params.PA|default(1.08) }
    #### end off definition  ####
	CG34                                     ; Check Home & Z-Tilt, do it when needed
    M83                                      ; Extruder relative mode
	M104 S140                                ; Extruder heat up standby temp 140
    M117 Wait for BED Temp                   ; Wait for reached Bed Temperature 
	M190 S{bed}                              ; Bed heat up
	G1 X0 Y0 F2200							 ; Go to front
    M117 Wait for Nozzle Temp                ; Wait for reached Extruder Temperature 
	M109 S{extruder}                         ; Extruder heat up to target temp
    G92 E0.0                                 ; Reset extruder length
	G90                                      ; Absolute positioning
	PRIME_LINE                               ; First move 


#######################################
# PRIME LINE Vyper                    #
#######################################
[gcode_macro PRIME_LINE]
description: Do a prime line
gcode:
    {action_respond_info("Prime Line")}
    M117 Prime line . . .
    G1 X1.0 Y20 F5000.0             ; Move to start position
    G1 Z0.35 F240                    ; move nozzle and bed closer together
    G92 E0.0                        ; reset extruder
	{action_respond_info("Extrudiert Filament")}
    G1 E8.0 F500                    ; pre-purge prime LENGTH SHOULD MATCH YOUR PRINT_END RETRACT
    G1 Y190 E15.0 F1500.0           ; intro line
    G1 X2.5 F5000                   ; move over a bit
    G1 Y10 E30 F1200.0              ; intro line
    G92 E0.0                        ; reset extruder
    G1 Z2.0 F3000                   ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0          ; Move over to prevent blob squish
	M117 Druckvorgang startet       ; Start printing
    {action_respond_info("Druckvorgang startet")}


#######################################
# Filament Change helper              #
#######################################
[gcode_macro Filament_Change]
description: Filament Change 
gcode:
    {action_respond_info("Filament change active")}
    M600                            ; Call Gcode M600
    {action_respond_info("Filament change DONE")}


#######################################
# M600 Filament Change                #
#######################################
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.
[gcode_macro M600]
description: Filament Change
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


#######################################
# Pause resume function               #
#######################################
[pause_resume]


#######################################
# END PRINT Vyper                     #
#######################################
[gcode_macro END_PRINT]
description: All what needs to be done at print end
gcode:
    TURN_OFF_HEATERS                         ; Turn off bed and nozzle
	G91                                      ; Relative positioning
	G1 E-1 F3000                             ; Retract
	G1 X-0.5 Y-0.5 Z5 E-7                    ; Move a bit and retract filament even more
	G90                                      ; Absolute positioning
	#G1 X0 Y200 F2200                        ; Move bed to front
    G1 X0 Y255 F5000                         ; X auf 0 & Y auf 255
	M107                                     ; Turn off part fan
	M18 X Y E                                ; Steppers X, Y & E off
	G90                                      ; Absolute positioning
	M117 Print done                          ; Send finish to display
    Airwolf                   		         ; Airwolf Sound
    {action_respond_info(". . . wir sind fertig!")}


#######################################
# PAUSE PRINT                         #
#######################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    {%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
    {%set act_extrude_temp = printer.extruder.temperature|int %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if act_extrude_temp > min_extrude_temp %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 


#######################################
# RESUME PRINT                        #
#######################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    {%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
    {%set act_extrude_temp = printer.extruder.temperature|int %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if act_extrude_temp > min_extrude_temp %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
      M117 Extruder not hot
    {% endif %}  
    RESUME_BASE {get_params}


#######################################
# Pressure Advance Calibration        #
#######################################
[gcode_macro PA_Calibration]
description: Adjust Velocity and PA parameters for bowden extruder
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020


#######################################
# PID BED MACRO                       #
#######################################
[gcode_macro PID_BED]
description: PID Cylce for BED
gcode:
    {action_respond_info("PID Cylce for BED active")}
    M117 PID Cylce BED active
    {% set pidbed = params.BED|default(60) %}
    PID_CALIBRATE HEATER=heater_bed TARGET={pidbed}
    {action_respond_info("PID Cylce for BED DONE")}
    M117 PID Cylce BED DONE


#######################################
# PID Extruder MACRO                  #
#######################################
[gcode_macro PID_Extruder]
description: PID Cylce for Extruder
gcode:
    {action_respond_info("PID Cylce for Extruder active")}
    M117 PID Cylce Extruder active
    {% set pidextruder = params.EXTRUDER|default(205) %}
    PID_CALIBRATE HEATER=extruder TARGET={pidextruder}
    {action_respond_info("PID Cylce for Extruder DONE")}
    M117 PID Cylce Extruder DONE


#######################################
# Motor Off                           #
#######################################
[gcode_macro Motor_OFF]
description: Stepper OFF
gcode:
    M18
    {action_respond_info("ALL Stepper Motors OFF")}
    M117 ALL Motors OFF


#######################################
# M300 - Pieper                       #
#######################################
[gcode_macro M300]
description: Play Tone
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=beeper_pin VALUE=0.85 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=beeper_pin VALUE=0

#######################################
# M355 - Case Light                   #
#######################################
[gcode_macro M355]
description: Case Light Control
gcode:
    # On / OFF
    {% set S = params.S|default(1)|int %}
    SET_PIN PIN=Case_light VALUE={S}


#######################################
# Wartungsposition                    #
#######################################
[gcode_macro Maintenance]
description: Maintenance position
gcode:
    CG28
    # Absolute mode on
    G90
    # Wartungskoordinate
    G1 X122.5 Y122.5 Z100 F3000
    # Relative Mode on
    G91
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Disable steppers
    # M84
    {action_respond_info("Printer in Maintenance Position!")}
    M117 in Maintenance Pos


#######################################
# Full Homing G28 Checkup             #
#######################################
[gcode_macro CG28]
; Check if G28 is done
description: Conditional homing, Check if G28 is done
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    {action_respond_info("Homing active!")}
    M117 Homing active
    G28
  {% else %}
    M117 All Axes homed!
    {action_respond_info("All Axes homed!")}
  {% endif %}


######################################
# G34 Z-Tilt                         #
######################################
[gcode_macro G34]
description: Z-Tilt
gcode:
    # Check home and homing when needed
    CG28
    {% if "xyz" in printer.toolhead.homed_axes %}
      {action_respond_info("Z-Tilt adjust active!")}
      M117 Z-Tilt adjusting
    {% endif %}
    # Start Z_tilt
    Z_TILT_ADJUST
    {% if printer['z_tilt'].applied == true %}
      {action_respond_info("Z-Tilt finished!")}
      M117 Z-Tilt adjusted
    {% endif %}
    # Home Z again
    M117 homing Z-Axis
    G28 Z
    G1 X0 Y0 Z25 F2500
    #{% if "xyz" in printer.toolhead.homed_axes %}
    #  {% if printer.toolhead.position.x == 0 %}
    #    {% if printer.toolhead.position.Y == 0 %}
    #      {% if printer.toolhead.position.z == 25 %}
    #        {action_respond_info("Z-Homing DONE!")}
    #        {action_respond_info("Z-Tilt DONE!")}
            M117 Z-Tilt DONE
    #      {% endif %}
    #    {% endif %}
    #  {% endif %}
    #{% endif %}


######################################
# Full Z-Tilt G34 Checkup            #
######################################
[gcode_macro CG34]
description: Conditional Z-Tilt, Check if G28 & G34 is done
gcode:
    {% if printer['z_tilt'].applied == false %}
      G34
    {% endif %}


#######################################
# BLT Test                            #
#######################################
[gcode_macro BLT_Test]
description: BLTouch Test
gcode:
 {action_respond_info("Move Pin down")}
 BLTOUCH_DEBUG COMMAND=pin_down
 G4 P2000
 {action_respond_info("Pin is down")}
 {action_respond_info("Move Pin up")}
 BLTOUCH_DEBUG COMMAND=pin_up
 G4 P2000
 {action_respond_info("Pin is up")}
 {action_respond_info("Move Pin down")}
 BLTOUCH_DEBUG COMMAND=pin_down
 G4 P2000
 {action_respond_info("Pin is down")}
 {action_respond_info("Touchmode On")}
 BLTOUCH_DEBUG COMMAND=touch_mode
 G4 P2000
 QUERY_PROBE
 {action_respond_info("Pin Should show open")}
 G4 P2000
 {action_respond_info("Pin Should show Move Pin a little bit up")}
 G4 P3000
 QUERY_PROBE
 {action_respond_info("Pin Should show triggert")}
 G4 P2000
 {action_respond_info("Move Pin up")}
 BLTOUCH_DEBUG COMMAND=pin_up
 G4 P2000
 {action_respond_info("Pin is up")}


#######################################
# BLT DOWN                            #
#######################################
[gcode_macro BLT_down]
description: BLTouch Move down
gcode:
 {action_respond_info("Move Pin down")}
 BLTOUCH_DEBUG COMMAND=pin_down


#######################################
# BLT UP                              #
#######################################
[gcode_macro BLT_up]
description: BLTouch Move Up
gcode:
 {action_respond_info("Move Pin up")}
 BLTOUCH_DEBUG COMMAND=pin_up


#######################################
# BLT Touchmode                       #
#######################################
[gcode_macro _BLT_tm]
description: BLTouch Touchmode
gcode:
 {action_respond_info("BLT Touchmode on")}
 BLTOUCH_DEBUG COMMAND=touch_mode


#######################################
# BLT Calibration Position            #
#######################################
[gcode_macro _BLT_pos]
description: BLTouch Touchmode
gcode: 
# Absolute mode on
    G90
    # Wartungskoordinate
    G1 X170 Y95 F2000
    # Relative Mode on
    G91


#######################################
# Play Airwolf Sound                  #
#######################################
[gcode_macro Airwolf]
description: Play Airwolf Sound 
gcode:
    M300 S932 P428
    M300 S0 P214
    M300 S1244 P214
    M300 S1396 P214
    M300 S1661 P214
    M300 S932 P214
    M300 S0 P428
    M300 S2217 P214
    M300 S2093 P214
    M300 S1661 P214
    M300 S932 P428
    M300 S0 P428
    M300 S2217 P214
    M300 S2093 P214
    M300 S1661 P214
    M300 S932 P428
    M300 S0 P214
    M300 S1661 P214
    M300 S2093 P214
    M300 S1396 P428
    M300 S1244 P428
    M300 S1108 P214
    M300 S1244 P214
    M300 S1046 P214
    M300 S1661 P214
    M300 S932 P21


#######################################
# Case Light ON                       #
#######################################
[gcode_macro LED_ON]
description: Case Light ON 
gcode:
    M355 S1


#######################################
# Case Light OFF                      #
#######################################
[gcode_macro LED_OFF]
description: Case Light OFF
gcode:
    M355 S0


#######################################
# read and list variables             #
#######################################
# This macro will allow you to type SEARCH_VARS S={some word} from the terminal and
# it will respond with all of the matching items in the printer object.
#
# Say I wanted to know what the name and path of for the value of the currently loaded bed
# mesh. I could do type search_vars s=profile in my terminal and it will respond with
# any items containing the word ‘profile’.
#
# $ SEARCH_VARS s="profile"
# // printer.bed_mesh.profile_name : default
# 
# Additionally, omitting the “s” parameter will just dump out literally everything and probably catch fire.
# You have been warned.

[gcode_macro SEARCH_VARS]
description: search variables
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}


#######################################
# SDCard 'looping'                    #
# (aka Marlin M808 commands) support  #
# Support SDCard looping              #
#######################################
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}


#######################################
# Enable object exclusion           #
#######################################
[exclude_object]


#######################################
# Cancel object (aka Marlin/RRF M486 commands) support
######################################
[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


#######################################
# NAS Backup                          #
#######################################
[gcode_shell_command BACKUP_START]
command: bash /home/pi/printer_data/config/.scripts/backup_NAS.sh
timeout: 10.
verbose: True

[gcode_macro BACKUP_NAS]
gcode: 
      RUN_SHELL_COMMAND CMD=BACKUP_START


#######################################
# GIT Backup                          #
#######################################
[gcode_shell_command GIT_BACKUP_START]
command: bash /home/pi/printer_data/config/.scripts/backup_GIT.sh
timeout: 10.
verbose: True

[gcode_macro BACKUP_GIT]
gcode: 
      RUN_SHELL_COMMAND CMD=GIT_BACKUP_START


#######################################
# Telegram BOT Macro                  #
#######################################
[gcode_macro _bot_data]
variable_lapse_video_size: 0
variable_lapse_filename: 'None'
variable_lapse_path: 'None'
gcode:
    M118 Setting bot lapse variables
